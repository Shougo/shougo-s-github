[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = '!has("win32")'
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = '''
  require('nvim-treesitter.configs').setup {
      ensure_installed = 'all',
      additional_vim_regex_highlighting = true,
      highlight = {
          enable = true,
          disable = function(lang, buf)
              if (lang == 'vimdoc' or lang == 'diff'
                  or lang == 'gitcommit' or lang == 'swift') then
                return true
              end
              local max_filesize = 50 * 1024 -- 50 KB
              local ok, stats = pcall(vim.loop.fs_stat,
                                      vim.api.nvim_buf_get_name(buf))
              if ok and stats and stats.size > max_filesize then
                  return true
              end
          end,
      },
  }
'''
hook_source = '''
  " Custom colors
  highlight CandyBlue         gui=NONE guibg=#2c2c2c guifg=#1e95fd
  highlight CandyCranberry    gui=NONE guibg=#2c2c2c guifg=#4ae2e2
  highlight CandyEmerald      gui=NONE guibg=#2c2c2c guifg=#44ff44
  highlight CandyGreen        gui=NONE guibg=#2c2c2c guifg=#66ff66
  highlight CandyLime         gui=NONE guibg=#2c2c2c guifg=#4ae2e2
  highlight CandyOrange       gui=NONE guibg=#2c2c2c guifg=#ffb30a
  highlight CandyRed          gui=NONE guibg=#2c2c2c guifg=#ff6666
  highlight CandySky          gui=NONE guibg=#2c2c2c guifg=#6699ff
  highlight CandyViolet       gui=NONE guibg=#2c2c2c guifg=#ff13ff
  highlight CandyWhite        gui=NONE guibg=#2c2c2c guifg=#cccccc
  highlight CandyYellow       gui=NONE guibg=#2c2c2c guifg=#ffd30a
  highlight CandyCoral        gui=NONE guibg=#2c2c2c guifg=#f820ff
  highlight CandyTurquoise    gui=NONE guibg=#2c2c2c guifg=#1bc8c8
  highlight CandyCrimson      gui=NONE guibg=#2c2c2c guifg=#ff4444

  " neovim treesitter colors
  highlight! link @attribute        CandyViolet
  highlight! link @boolean          Boolean
  highlight! link @character        Character
  highlight! link @character.special SpecialChar
  highlight! link @comment          Comment
  highlight! link @conditional      CandyCoral
  highlight! link @constant         Constant
  highlight! link @constant.builtin CandyGreen
  highlight! link @constant.macro   CandyViolet
  highlight! link @constructor      CandyEmerald
  highlight! link @debug            Character
  highlight! link @error            Error
  highlight! link @exception        Exception
  highlight! link @field            CandyBlue
  highlight! link @float            Float
  highlight! link @function         CandyCranberry
  highlight! link @function.builtin CandySky
  highlight! link @function.call    CandySky
  highlight! link @function.macro   CandySky
  highlight! link @include          CandyCranberry
  highlight! link @keyword          CandyEmerald
  highlight! link @keyword.function Keyword
  highlight! link @keyword.operator CandyViolet
  highlight! link @keyword.return   CandyRed
  highlight! link @label            Label
  highlight! link @method           CandyTurquoise
  highlight! link @method.call      CandyTurquoise
  highlight! link @namespace        CandyBlue
  highlight! link @none             Normal
  highlight! link @number           Number
  highlight! link @operator         Operator
  highlight! link @parameter        CandyWhite
  highlight! link @preproc          PreProc
  highlight! link @property         Identifier
  highlight! link @punctuation.special Special
  highlight! link @repeat           Repeat
  highlight! link @storageclass     CandyBlue
  highlight! link @string           String
  highlight! link @string.escape    SpecialChar
  highlight! link @string.regex     String
  highlight! link @symbol           Identifier
  highlight! link @tag              CandyBlue
  highlight! link @tag.attribute    CandyBlue
  highlight! link @tag.delimiter    CandyLime
  highlight! link @text             None
  highlight! link @text.danger      ErrorMsg
  highlight! link @text.emphasis    Italic
  highlight! link @text.environment CandyGreen
  highlight! link @text.environment.name CandyLime
  highlight! link @text.literal     CandyYellow
  highlight! link @text.math        CandyBlue
  highlight! link @text.note        Todo
  highlight! link @text.reference   CandySky
  highlight! link @text.strike      Underlined
  highlight! link @text.strong      Bold
  highlight! link @text.tile        Title
  highlight! link @text.underline   Underlined
  highlight! link @text.uri         Underlined
  highlight! link @text.warning     WarningMsg
  highlight! link @todo             Todo
  highlight! link @type             Type
  highlight! link @type.builtin     Type
  highlight! link @type.definition  Type
  highlight! link @type.qualifier   Type
  highlight! link @variable         Identifier
  highlight! link @variable.builtin CandyLime
  highlight! link @variable.global  CandyViolet
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_source = '''
  -- NOTE: Disable lsp watcher. Too slow on linux
  -- https://github.com/neovim/neovim/issues/23725#issuecomment-1561364086
  require('vim.lsp._watchfiles')._watchfunc = function()
    return function() end
  end

  vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      update_in_insert = false,
      virtual_text = {
        format = function(diagnostic)
          return string.format(
            '%s (%s: %s)',
            diagnostic.message,
            diagnostic.source,
            diagnostic.code
          )
        end
      },
  })
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  -- https://zenn.dev/kawarimidoll/articles/2b57745045b225
  require('mason-lspconfig').setup_handlers({
    function(server_name)
      local nvim_lsp = require('lspconfig')
      local is_node_repo = vim.fn.findfile('package.json', '.;') ~= ''

      local opts = {}

      if server_name == 'vtsls' then
        -- Must be node directory
        if not is_node_repo then
          return
        end

        opts.root_dir = nvim_lsp.util.root_pattern('package.json')
      elseif server_name == 'denols' then
        -- Must not be node directory
        if is_node_repo then
          return
        end

        opts.init_options = {
          lint = true,
          unstable = true,
          documentPreloadLimit = 10,
          suggest = {
            autoImports = false,
            imports = {
              hosts = {
                ['https://deno.land'] = true,
                ['https://cdn.nest.land'] = true,
                ['https://crux.land'] = true
              },
            },
          },
        }
      elseif server_name == 'solargraph' then
        opts.single_file_support = true
        opts.capabilities = {}
      elseif server_name == 'lua_ls' then
        opts = {
          settings = {
            Lua = {
              runtime = {
                -- Tell the language server which version of Lua you're using
                -- (most likely LuaJIT in the case of Neovim)
                version = 'LuaJIT',
              },
              diagnostics = {
                -- Get the language server to recognize the `vim` global
                globals = {
                  'vim',
                  'require'
                },
              },
              workspace = {
                -- Make the server aware of Neovim runtime files
                library = vim.api.nvim_get_runtime_file("", true),
              },
              -- Do not send telemetry data
              telemetry = {
                enable = false,
              },
            },
          },
        }
      end

      nvim_lsp[server_name].setup(opts)
    end
  })
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = 'nvim-lspconfig'
on_event = ['BufRead']
lua_source = '''
  require('mason').setup()
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'folke/noice.nvim'
depends = 'nui.nvim'
#on_event = 'VimEnter'
lua_source = '''
  require('noice').setup {
    cmdline = {
      enabled = true,
      format = {
        cmdline = { pattern = "^:", icon = ":", lang = "vim" },
        search_down = { kind = "search", pattern = "^/", icon = "/", lang = "regex" },
        search_up = { kind = "search", pattern = "^%?", icon = "?", lang = "regex" },
        filter = { pattern = "^:%s*!", icon = "$", lang = "bash" },
        lua = { pattern = "^:%s*lua%s+", icon = "", lang = "lua" },
        help = { pattern = "^:%s*he?l?p?%s+", icon = "" },
        input = {}, -- Used by input()
        -- lua = false, -- to disable a format, set to `false`
      },
    },
    popupmenu = {
      enabled = false,
    },
    messages = {
      enabled = true,
    },
    routes = {
      {
        view = "mini",
        filter = {
          event = { "msg_show", "msg_showmode" },
          ["not"] = {
            kind = { "confirm", "confirm_sub" },
          },
        },
      },
      {
        filter = {
          event = "cmdline",
          find = "^%s*[/?]",
        },
        view = "cmdline",
      },
    },
  }
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
lua_source = '''
  require('notify').setup({
    render = "minimal",
    stages = "static",
    timeout = 1000,
  })
'''

[[plugins]]
repo = 'atusy/tsnode-marker.nvim'
depends = 'nvim-treesitter'
on_ft = 'markdown'
lua_source = '''
  vim.api.nvim_create_autocmd('FileType', {
    group = vim.api.nvim_create_augroup('tsnode-marker-markdown', {}),
    pattern = 'markdown',
    callback = function(ctx)
      require('tsnode-marker').set_automark(ctx.buf, {
        target = { 'code_fence_content' }, -- list of target node types
        hl_group = 'CursorLine', -- highlight group
      })
    end,
  })
'''
