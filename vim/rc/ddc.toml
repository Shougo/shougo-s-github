[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hooks_file = '$BASE_DIR/ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option(#{
    \   auto_confirm_time: 3000,
    \   horizontal_menu: v:false,
    \   max_width: 80,
    \   use_complete: v:true,
    \   use_setline: v:false,
    \ })
  call pum#set_local_option('c', #{
    \   horizontal_menu: v:false,
    \ })
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-omni'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rtags'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_vimregexp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-converter_truncate_abbr'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \   ['vim'],
          \   'sources',
          \   ['copilot', 'necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
depends = ['ddc.vim']
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
  "let g:skkeleton#debug = v:true
  call skkeleton#config(#{
        \   globalJisyo: has('win32') ?
        \     '~/.config/SKK-JISYO.L' : '/usr/share/skk/SKK-JISYO.L',
        \   eggLikeNewline: v:true,
        \   registerConvertResult: v:true,
        \   markerHenkan: '',
        \   markerHenkanSelect: '',
        \ })

  call skkeleton#register_kanatable('rom', {
        \   'jj': 'escape',
        \   '~': ['〜', ''],
        \   "z\<Space>": ["\u3000", ''],
        \ })

  autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer(#{
            \   sources: ['around', 'skkeleton'],
            \   keywordPattern: '[ァ-ヮア-ンー]+',
            \ })
  endfunction
  autocmd MyAutoCmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

  " :mode is needed to redraw screen
  autocmd MyAutoCmd InsertLeave * mode
'''

[[plugins]]
repo = 'Matts966/skk-vconv.vim'
on_source = ['skkeleton']

#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = ['ddc.vim']
#hook_source = '''
#  autocmd MyAutoCmd User PumCompleteChanged ++once
#  \ call popup_preview#enable()
#'''
