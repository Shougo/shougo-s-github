[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  call ddc#custom#patch_global('sources',
      \ ['around', 'file', 'rg'],
      \ )
  call ddc#custom#patch_global('cmdlineSources', {
      \   ':': ['cmdline-history', 'cmdline', 'around'],
      \   '@': ['cmdline-history', 'input', 'file', 'around'],
      \   '>': ['cmdline-history', 'input', 'file', 'around'],
      \   '/': ['around', 'line'],
      \   '?': ['around', 'line'],
      \   '-': ['around', 'line'],
      \   '=': ['input'],
      \ })

  call ddc#custom#patch_global('sourceOptions', #{
      \   _: #{
      \     ignoreCase: v:true,
      \     matchers: ['matcher_head', 'matcher_length'],
      \     sorters: ['sorter_rank'],
      \     converters: [
      \       'converter_remove_overlap', 'converter_truncate_abbr',
      \     ],
      \   },
      \   around: #{
      \     mark: 'A',
      \   },
      \   buffer: #{
      \     mark: 'B',
      \   },
      \   necovim: #{
      \     mark: 'vim',
      \   },
      \   nvim-lua: #{
      \     mark: 'lua',
      \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
      \   },
      \   cmdline: #{
      \     mark: 'cmdline',
      \     forceCompletionPattern: '\S/\S*|\.\w*',
      \     dup: 'force',
      \   },
      \   input: #{
      \     mark: 'input',
      \     forceCompletionPattern: '\S/\S*',
      \     isVolatile: v:true,
      \     dup: 'force',
      \   },
      \   line: #{
      \     mark: 'line',
      \   },
      \   mocword: #{
      \     mark: 'mocword',
      \     minAutoCompleteLength: 3,
      \     isVolatile: v:true,
      \   },
      \   nvim-lsp: #{
      \     mark: 'lsp',
      \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
      \     dup: 'force',
      \   },
      \   rtags: #{
      \     mark: 'R',
      \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
      \   },
      \   file: #{
      \     mark: 'F',
      \     isVolatile: v:true,
      \     minAutoCompleteLength: 1000,
      \     forceCompletionPattern: '\S/\S*',
      \   },
      \   cmdline-history: #{
      \     mark: 'history',
      \     sorters: [],
      \   },
      \   shell-history: #{
      \     mark: 'shell'
      \   },
      \   zsh: #{
      \     mark: 'zsh',
      \     isVolatile: v:true,
      \     forceCompletionPattern: '\S/\S*',
      \   },
      \   rg: #{
      \     mark: 'rg',
      \     minAutoCompleteLength: 5,
      \     enabledIf: "finddir('.git', ';') != ''",
      \   },
      \ })

  call ddc#custom#patch_global('sourceOptions', #{
      \   skkeleton: #{
      \     mark: 'skk',
      \     matchers: ['skkeleton'],
      \     sorters: [],
      \     minAutoCompleteLength: 2,
      \     isVolatile: v:true,
      \   },
      \ })
  call ddc#custom#patch_global('sourceParams', #{
      \   buffer: #{
      \     requireSameFiletype: v:false,
      \     limitBytes: 50000,
      \     fromAltBuf: v:true,
      \     forceCollect: v:true,
      \   },
      \   file: #{
      \     filenameChars: '[:keyword:].',
      \   },
      \ })

  call ddc#custom#patch_filetype(
      \ ['help', 'markdown', 'gitcommit'], 'sources',
      \ ['around', 'rg', 'mocword']
      \ )
  call ddc#custom#patch_filetype(['ddu-ff-filter'], #{
      \   keywordPattern: '[0-9a-zA-Z_:#-]*',
      \   sources: ['line', 'buffer'],
      \   specialBufferCompletion: v:true,
      \ })

  if has('nvim')
    call ddc#custom#patch_filetype(
            \ ['typescript', 'go', 'python'], 'sources',
            \ ['around', 'nvim-lsp']
            \ )
    call ddc#custom#patch_filetype(
            \ ['lua'], 'sources',
            \ ['nvim-lua', 'around']
            \ )
  endif

  call ddc#custom#patch_filetype(['FineCmdlinePrompt'], #{
      \   keywordPattern: '[0-9a-zA-Z_:#-]*',
      \   sources: ['cmdline-history', 'around'],
      \   specialBufferCompletion: v:true,
      \ })

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
      \ ])
  call ddc#custom#patch_global('ui', 'pum')

  " Context config
  call ddc#custom#set_context_filetype('go', { ->
      \ ddc#syntax#in('TSComment') ? {
      \   'sources': ['around', 'mocword'],
      \ } : {} })
  call ddc#custom#set_context_filetype('c', { ->
      \ ddc#syntax#in('Comment') ? {
      \   'sources': ['around', 'mocword'],
      \ } : {} })

  " For insert mode completion
  inoremap <expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-o>   <Cmd>call pum#map#confirm()<CR>
  inoremap <expr> <C-l>   ddc#map#extend(pum#map#confirm())
  inoremap <C-x><C-f> <Cmd>call ddc#map#manual_complete('file')<CR>
  inoremap <expr> l
        \ pum#entered() ?
        \ '<Cmd>call pum#map#insert_relative(+1)<CR>' : 'l'
  inoremap <expr> h
        \ pum#entered() ?
        \ '<Cmd>call pum#map#insert_relative(-1)<CR>' : 'h'
  inoremap <expr> <C-e>
        \ ddc#map#insert_item(0, '<Cmd>call pum#map#cancel()<CR>')
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>

  " For command line mode completion
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#map#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <expr> <C-e>
        \ ddc#map#insert_item(0, '<Cmd>call pum#map#cancel()<CR>')

  " NOTE: Test for terminal completion
  call ddc#custom#patch_filetype(['deol'], #{
      \   specialBufferCompletion: v:true,
      \   keywordPattern: '[0-9a-zA-Z_./#:-]*',
      \   sources: ['zsh', 'shell-history', 'around'],
      \ })

  call ddc#enable()
'''
hook_add = '''
  nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?

  function! CommandlinePre(mode) abort
    " NOTE: It disables default command line completion!
    set wildchar=<C-t>
    set wildcharm=<C-t>

    cnoremap <expr><buffer> <Tab>
    \ pum#visible() ?
    \  '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:ddc_cmdline_completion') ?
    \   ddc#map#manual_complete() : "\<C-t>"

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#-]*')
    endif

    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd MyAutoCmd InsertEnter <buffer> ++once call CommandlinePost()

    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <buffer> <Tab>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif

    set wildcharm=<Tab>
  endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', 80)
  call pum#set_option('use_complete', v:true)
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-omni'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rtags'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', ['necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
  "let g:skkeleton#debug = v:true
  call skkeleton#config(#{
        \   globalJisyo: has('win32') ?
        \     '~/.config/SKK-JISYO.L' : '/usr/share/skk/SKK-JISYO.L',
        \   eggLikeNewline: v:true,
        \   registerConvertResult: v:true,
        \   markerHenkan: '',
        \   markerHenkanSelect: '',
        \ })

  call skkeleton#register_kanatable('rom', {
        \   'jj': 'escape',
        \   '~': ['〜', ''],
        \   "z\<Space>": ["\u3000", ''],
        \ })

  autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['skkeleton'])
  endfunction
  autocmd MyAutoCmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

  " :mode is needed to redraw screen
  autocmd MyAutoCmd InsertLeave * mode
'''

[[plugins]]
repo = 'Matts966/skk-vconv.vim'
on_source = ['skkeleton']

#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = ['ddc.vim']
#hook_source = '''
#  autocmd MyAutoCmd User PumCompleteChanged ++once
#  \ call popup_preview#enable()
#'''
