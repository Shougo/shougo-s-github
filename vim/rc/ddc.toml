[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim']
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-l> ddc#complete_common_string()
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? '<C-n>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#manual_complete()

  call ddc#custom#patch_global(
      \ 'sources', has('nvim') ?
      \ ['eskk', 'around', 'deoppet'] : ['eskk', 'around'],
      \ )
  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \ },
      \ 'eskk': {'mark': 'eskk', 'matchers': [], 'sorters': []},
      \ 'necovim': {'mark': 'vim'},
      \ 'deoppet': {'mark': 'dp', 'dup': v:true},
      \ 'nextword': {
      \   'mark': 'nextword',
      \   'minAutoCompleteLength': 3,
      \   'isVolatile': v:true,
      \ },
      \ 'nvimlsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->'},
      \ })
  call ddc#custom#patch_filetype(
      \ ['help', 'markdown', 'gitcommit', 'toml'], 'sources',
      \ ['eskk', 'nextword', 'around']
      \ )
  call ddc#custom#patch_filetype(
      \ ['typescript', 'go'], 'sources', has('nvim') ?
      \ ['nvimlsp', 'around', 'deoppet'] : ['nvimlsp', 'around']
      \ )
  "call ddc#custom#patch_global('completionMode', 'inline')
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_ft = 'zsh'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'help']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', has('nvim') ?
          \ ['necovim', 'around', 'deoppet'] : ['necovim', 'around']
          \ )
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
on_ft = ['typescript', 'go']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
  lua << EOF
require'lspconfig'.denols.setup{}
require'lspconfig'.gopls.setup{}
EOF
'''

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
on_source = 'ddc.vim'
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#directory = expand('$CACHE/eskk')
  let g:eskk#keep_state = 0
  let g:eskk#debug = 0
  let g:eskk#show_annotation = 1
  let g:eskk#rom_input_style = 'msime'
  let g:eskk#egg_like_newline = 1
  let g:eskk#egg_like_newline_completion = 1
  let g:eskk#tab_select_completion = 1
  let g:eskk#start_completion_length = 2
  let g:eskk#dictionary = {
        \   'path': expand('$CACHE/skk-jisyo'),
        \   'sorted': 0,
        \   'encoding': 'utf-8',
        \}
  let g:eskk#large_dictionary = {
        \   'path': '/usr/share/skk/SKK-JISYO.L',
        \   'sorted': 1,
        \   'encoding': 'euc-jp',
        \}

  " if $TERM !~# '^rxvt' && has('nvim')
  "   " Use <> instead of $B"&(B.
  "   let g:eskk#marker_henkan = '<>'
  "   " Use >> instead of $B"'(B.
  "   let g:eskk#marker_henkan_select = '>>'
  " endif

  autocmd MyAutoCmd User eskk-initialize-pre call s:eskk_initial_pre()
  function! s:eskk_initial_pre() abort
    let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
    call t.add_map('z ', '$B!!(B')
    call t.add_map('~', '$B!A(B')
    call t.add_map('zc', '$(O)&(B')
    call t.add_map('zr', '$(O)*(B')
    call t.add_map('z9', '$B!J(B')
    call t.add_map('z0', '$B!K(B')
    call eskk#register_mode_table('hira', t)
  endfunction

  let &g:titlestring = "
        \ %(%m%r%w%)%{eskk#statusline('[%s]').expand('%:p:~:.')}
        \ %<\(%{fnamemodify(getcwd(), ':~')}\)"
'''
