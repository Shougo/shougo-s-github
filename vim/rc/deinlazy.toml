[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  let g:echodoc#type = 'virtual'
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  nnoremap <silent>   [Space]f
  \ :<C-u>Defx -listed -resume -buffer-name=win-`win_getid()`<CR>
'''
hook_source = '''
  call defx#custom#column('mark', {
          \ 'readonly_icon': '✗',
          \ 'selected_icon': '✓',
          \ })
  call defx#custom#column('icon', {
          \ 'directory_icon': '▸',
          \ 'opened_icon': '▾',
          \ 'root_icon': ' ',
          \ })
'''
[plugins.ftplugin]
defx = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#async_action('open')
  nnoremap <silent><buffer><expr> +
  \ defx#do_action('open', 'choose')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> &
  \ defx#do_action('execute_command', ['', 'async'])
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', ['nested', 'toggle'])
  nnoremap <silent><buffer><expr> O
  \ defx#do_action('open_tree', 'recursive')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'Time')
  nnoremap <silent><buffer><expr> se
  \ defx#do_action('add_session')
  nnoremap <silent><buffer><expr> sl
  \ defx#do_action('load_session')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> >
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> <
  \ defx#do_action('change_ignored_files')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \
  \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  xnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('toggle_select_visual')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
  \ ':<C-u>wincmd w<CR>' :
  \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  "imap <silent>L     <Plug>(neosnippet_jump_or_expand)
  "smap <silent>L     <Plug>(neosnippet_jump_or_expand)
  "xmap <silent>L     <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  " let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1

  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.vim/my-snippets'
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
if = 'has("nvim")'
hook_source = '''
  " Test
  "imap L  <Plug>(deoppet_expand)
  imap <expr> L  deoppet#expandable() ?
  \ "\<Plug>(deoppet_expand)" : ''
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)
  smap <C-f>  <Plug>(deoppet_jump_forward)
  smap <C-b>  <Plug>(deoppet_jump_backward)
  xmap <C-l>  <Plug>(deoppet_select_text)
  xmap <C-x>  <Plug>(deoppet_cut_text)
  call deoppet#initialize()

  call deoppet#custom#option('snippets',
          \ [{ 'path': expand('~/.vim/my-snippets')}] +
          \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
          \     "{ 'path': v:val }"))
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/rc/plugins/denite.rc.vim'
hook_add = '''
  nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> ;r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>

  nnoremap <silent> [Window]<Space>
  \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  nnoremap <silent><expr> / wordcount().chars > 30000 ?
  \ ":\<C-u>Denite -buffer-name=search -start-filter
  \  -search line/external\<CR>" :
  \ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
  nnoremap <silent><expr> * wordcount().chars > 30000 ?
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
  xnoremap <silent> *
  \ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>
  nnoremap <silent><expr> [Window]s finddir('.git', ';') != '' ?
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file/dirty file/git file file:new\<CR>" :
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file file:new\<CR>"
  nnoremap <silent> n
  \ :<C-u>Denite -buffer-name=search -resume<CR>

  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately tag:include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
  \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"

  nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  nnoremap <silent> [Window]g :<C-u>Denite ghq -default-action=cd<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
  \ -no-empty grep<CR>
  nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating
  \ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
  nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
  nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>
'''

[plugins.ftplugin]
denite = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> e
  \ denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> N
  \ denite#do_map('do_action', 'new')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> '
  \ denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> r
  \ denite#do_map('do_action', 'quickfix')
  nnoremap <silent><buffer><expr> <C-r>
  \ denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-l>
  \ denite#do_map('redraw')
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
depends = 'denite.nvim'
on_source = ['defx.nvim', 'denite.nvim']
hook_add = '''
  nnoremap <silent> [Space]s :<C-u>Deol zsh -no-start-insert<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*% '
  let g:deol#shell_history_path = '~/.zsh-history'
  let g:deol#extra_options = {
      \ 'term_kill': 'kill',
      \ }
'''
[plugins.ftplugin]
deol = '''
  nnoremap <buffer><silent> [Space]gc
  \ :<C-u>call deol#send('git commit')<CR>
  nnoremap <buffer><silent> [Space]gs
  \ :<C-u>call deol#send('git status')<CR>
  nnoremap <buffer><silent> [Space]gA
  \ :<C-u>call deol#send('git commit --amend')<CR>
  nmap <buffer> i <Plug>(deol_edit)
  nmap <buffer> e <Plug>(deol_edit)
'''
zsh = '''
  inoreabbrev <buffer><expr> g deol#abbrev('g', 'g', 'git')
  inoreabbrev <buffer><expr> a deol#abbrev('git a', 'a', 'add')
  inoreabbrev <buffer><expr> b deol#abbrev('git b', 'b', 'branch')
  inoreabbrev <buffer><expr> c deol#abbrev('git c', 'c', 'commit')
  inoreabbrev <buffer><expr> d deol#abbrev('git d', 'd', 'diff')
  inoreabbrev <buffer><expr> p deol#abbrev('git p', 'p', 'push')
  inoreabbrev <buffer><expr> s deol#abbrev('git s', 's', 'status')
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> [Window]e :<C-u>Denite junkfile:new junkfile<CR>
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
  let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

[[plugins]]
repo = 'thinca/vim-scouter'

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#directory = expand('$CACHE/eskk')
  let g:eskk#keep_state = 0
  let g:eskk#debug = 0
  let g:eskk#show_annotation = 1
  let g:eskk#rom_input_style = 'msime'
  let g:eskk#egg_like_newline = 1
  let g:eskk#egg_like_newline_completion = 1
  let g:eskk#tab_select_completion = 1
  let g:eskk#start_completion_length = 2
  let g:eskk#dictionary = {
        \   'path': expand('$CACHE/skk-jisyo'),
        \   'sorted': 0,
        \   'encoding': 'utf-8',
        \}
  let g:eskk#large_dictionary = {
        \   'path': '/usr/share/skk/SKK-JISYO.L',
        \   'sorted': 1,
        \   'encoding': 'euc-jp',
        \}

  " if $TERM !~# '^rxvt' && has('nvim')
  "   " Use <> instead of ▽.
  "   let g:eskk#marker_henkan = '<>'
  "   " Use >> instead of ▼.
  "   let g:eskk#marker_henkan_select = '>>'
  " endif

  autocmd MyAutoCmd User eskk-initialize-pre call s:eskk_initial_pre()
  function! s:eskk_initial_pre() abort
    let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
    call t.add_map('z ', '　')
    call t.add_map('~', '〜')
    call t.add_map('zc', '©')
    call t.add_map('zr', '®')
    call t.add_map('z9', '（')
    call t.add_map('z0', '）')
    call eskk#register_mode_table('hira', t)
  endfunction

  let &g:statusline = "%{winnr('$')>1?'['.winnr().'/'.winnr('$')"
        \ . ".(winnr('#')==#winnr()?'#':'').']':''}\ "
        \ . "%{(&previewwindow?'[preview] ':'')"
        \ . ".expand('%:t')==#''?expand('%'):expand('%:t')}"
        \ . "\ %=%{(winnr('$')==1||winnr('#')!=winnr())?"
        \ . "eskk#statusline('[%s]')."
        \ . "'['.(&filetype!=#''?&filetype.',':'')"
        \ . ".(&fenc!=''?&fenc:&enc).','.&ff.']':''}"
        \ . "%m%{printf('%'.(len(line('$'))+2).'d/%d',line('.'),line('$'))}"
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

# [[plugins]]
# repo = 'katono/rogue.vim'

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'machakann/vim-vimhelplint'
on_ft = 'help'
[plugins.ftplugin]
help = '''
  nnoremap <silent><buffer> ,r  :<C-u>VimhelpLint!<CR>
'''

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  source ~/.vim/rc/plugins/deoplete.rc.vim
  call deoplete#enable()
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
  let g:suda_smart_edit = 1
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
if = 'has("nvim")'
hook_source = '''
  let g:float_preview#docked = 0
  let g:float_preview#max_width = 60
  let g:float_preview#max_height = 20
'''

[[plugins]]
repo = 'dag/vim2hs'
on_ft = 'haskell'
hook_source = '''
  let g:haskell_conceal = 0
'''

[[plugins]]
repo = 'tyru/notify-changed.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    highlight = {
        enable = true,
        disable = {},
    },
    incremental_selection = {
        enable = true,
        disable = {},
        keymaps = {
          init_selection = 'gnn',
          node_incremental = 'grn',
          scope_incremental = 'grc',
          node_decremental = 'grm',
        }
    },
    refactor = {
      highlight_defintions = {
        enable = true
      },
      smart_rename = {
        enable = true,
        smart_rename = 'grr'
      },
      navigation = {
        enable = true,
        goto_definition = 'gnd',
        list_definitions = 'gnD'
      }
    },
    ensure_installed = 'all'
}
EOF

" neovim treesitter colors
highlight! link TSAnnotation      CandyViolet
highlight! link TSAttribute       CandySky
highlight! link TSBoolean         Boolean
highlight! link TSCharacter       Character
highlight! link TSConditional     CandyCoral
highlight! link TSConstBuiltin    CandyGreen
highlight! link TSConstMacro      CandyViolet
highlight! link TSConstant        Constant
highlight! link TSConstructor     CandyEmerald
highlight! link TSError           Error
highlight! link TSException       Exception
highlight! link TSField           CandyBlue
highlight! link TSFloat           Float
highlight! link TSFuncBuiltin     CandySky
highlight! link TSFuncMacro       CandySky
highlight! link TSFunction        CandyCranberry
highlight! link TSInclude         CandyCranberry
highlight! link TSKeyword         CandyEmerald
highlight! link TSKeywordFunction Keyword
highlight! link TSKeywordOperator CandyViolet
highlight! link TSLabel           Label
highlight! link TSLiteral         CandyYellow
highlight! link TSMethod          CandyTurquoise
highlight! link TSNamespace       CandyBlue
highlight! link TSNone            Normal
highlight! link TSNumber          Number
highlight! link TSOperator        Operator
highlight! link TSParameter       CandyWhite
highlight! link TSParameterReference CandyWhite
highlight! link TSProperty        Identifier
highlight! link TSPunctBracket    CandyOrange
highlight! link TSPunctDelimiter  CandyLime
highlight! link TSPunctSpecial    Special
highlight! link TSRepeat          Repeat
highlight! link TSString          String
highlight! link TSStringEscape    SpecialChar
highlight! link TSStringRegex     String
highlight! link TSTag             CandyBlue
highlight! link TSTagDelimiter    CandyLime
highlight! link TSText            TSNone
highlight! link TSTitle           Title
highlight! link TSType            Type
highlight! link TSTypeBuiltin     Type
highlight! link TSURL             Underlined
highlight! link TSUnderline       Underlined
highlight! link TSVariableBuiltin CandyLime
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
hook_source = '''
let g:eft_ignorecase = v:true
'''
hook_add = '''
nmap ;; <Plug>(eft-repeat)
xmap ;; <Plug>(eft-repeat)

nmap f <Plug>(eft-f)
xmap f <Plug>(eft-f)
omap f <Plug>(eft-f)
nmap F <Plug>(eft-F)
xmap F <Plug>(eft-F)
omap F <Plug>(eft-F)
'''
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]]
repo = 't9md/vim-choosewin'
on_source = 'defx.nvim'

[[plugins]]
repo = 'sheerun/vim-polyglot'
on_event = ['BufRead', 'BufNewFile']
hook_add = '''
let g:polyglot_disabled = ['markdown', 'tsx', 'typescript', 'csv', 'autoindent']
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
on_command = 'Vitalize'

[[plugins]]
repo = 'Shougo/deorise.nvim'
