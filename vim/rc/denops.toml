[[plugins]]
repo = 'vim-denops/denops.vim'
hook_source = '''
  "let g:denops#debug = v:true

  " NOTE: for profile
  "let g:denops#server#deno_args = [
  "    \ '-q',
  "    \ '-A',
  "    \ '--unstable',
  "    \ '--inspect',
  "    \ ]

  " NOTE: for test
  "let g:denops#server#deno_args = [
  "    \ '-q',
  "    \ '-A',
  "    \ '--unstable',
  "    \ ]

  "let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'Shougo/ddx.vim'
hook_add = '''
  nnoremap [Space]x <Cmd>Ddx -path=`'%'->expand()`<CR>
'''
hook_source = '''
  call ddx#custom#patch_global(#{
      \   ui: 'hex',
      \ })
'''
[plugins.ftplugin]
ddx-hex = '''
  nnoremap <buffer> q
  \ <Cmd>call ddx#ui#hex#do_action('quit')<CR>
  nnoremap <buffer> r
  \ <Cmd>call ddx#ui#hex#do_action('change')<CR>
'''

[[plugins]]
repo = 'Shougo/ddx-commands.vim'
depends = 'ddx.vim'
on_cmd = 'Ddx'

[[plugins]]
repo = 'Shougo/dda.vim'
hook_add = '''
" Completion with prompt
command! -nargs=* -range -bar
\ Dda call RangeCompletion(<line1>, <line2>, <range>, <q-args>)
function! RangeCompletion(line1, line2, range, prompt)
  const offset = 20

  if a:range > 0
    " Visual mode
    const selected = getline(a:line1, a:line2)->join("\n")
    if a:prompt !=# ''
      silent call deletebufline('%'->bufnr(), a:line1, a:line2)
      call dda#edit(selected, a:prompt)
    else
      call dda#completion(selected)
    endif
  else
    if a:prompt !=# ''
      call dda#completion(a:prompt)
    else
      " Use current buffer
      call dda#completion(
              \   getline([1, line('.') - offset]->max(), line('.') - 1)
              \   ->add(dda#util#get_input())->join("\n"),
              \   getline(line('.') + 1, line('.') + offset)
              \   ->insert(dda#util#get_next_input())->join("\n")
              \ )
    endif
  endif
endfunction

" Completion with current buffer
"inoremap <C-a>  <Cmd>Dda<CR>
'''
hook_source = '''
'''

#[[plugins]]
#repo = 'skanehira/denops-silicon.vim'
#hook_source = '''
#  let g:silicon_options = #{
#      \   font: 'Courier 10 Pitch',
#      \   no_line_number: v:true,
#      \   no_round_corner: v:false,
#      \   no_window_controls: v:false,
#      \   background_color: '#ffffff',
#      \   line_offset: 1,
#      \   line_pad: 2,
#      \   pad_horiz: 10,
#      \   pad_vert: 10,
#      \   shadow_blur_radius: 0,
#      \   shadow_color: '#555555',
#      \   shadow_offset_x: 0,
#      \   shadow_offset_y: 0,
#      \   tab_width: 4,
#      \   theme: 'Solarized (dark)',
#      \ }
#'''

[[plugins]]
repo = 'uga-rosa/scorpeon.vim'
on_cmd = 'VsctmHighlightEnable'
depends = 'denops.vim'
hook_source = '''
  let g:scorpeon_extensions_path = '~/.cache/scorpeon/extensions'->expand()
'''

[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = 'denops.vim'
denops_wait = false

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ict = '<Plug>(skkeleton-' }
hook_add = '''
  inoremap <C-j> <Plug>(skkeleton-toggle)
  cnoremap <C-j> <Plug>(skkeleton-toggle)
  tnoremap <C-j> <Plug>(skkeleton-toggle)
  nnoremap <C-j> i<Plug>(skkeleton-enable)

  " Lazy load by background
  if !has('win32')
    call timer_start(1, { _ -> dpp#source('skkeleton') })
  endif
'''
hook_source = '''
  "let g:skkeleton#debug = v:true

  call skkeleton#config(#{
        \   globalJisyo: has('win32') ?
        \     '~/.config/SKK-JISYO.L' : '/usr/share/skk/SKK-JISYO.L',
        \   eggLikeNewline: v:true,
        \   registerConvertResult: v:true,
        \   useGoogleJapaneseInput: v:true,
        \   markerHenkan: '',
        \   markerHenkanSelect: '',
        \ })

  "call skkeleton#config(#{
  "      \   databasePath: '~/.cache/skkeleton.db',
  "      \ })

  " For SKK server test.
  "call skkeleton#config(#{
  "      \   eggLikeNewline: v:true,
  "      \   registerConvertResult: v:true,
  "      \   useGoogleJapaneseInput: v:false,
  "      \   markerHenkan: '',
  "      \   markerHenkanSelect: '',
  "      \   useSkkServer: v:true,
  "      \ })

  call skkeleton#register_kanatable('rom', {
        \   'jj': 'escape',
        \   '~': ['〜', ''],
        \ })

  autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer(#{
            \   sources: ['around', 'skkeleton', 'line'],
            \   sourceOptions: #{
            \     _: #{
            \       keywordPattern: '[ァ-ヮア-ンー]+',
            \     },
            \   },
            \ })

    if (!has('nvim') || $DISPLAY !=# '') && has('clipboard')
      " Copy to clipboard to use Vim as IME
      autocmd InsertLeave * ++once
        \ let @* = '.'->getline() | let @+ = @*
    endif
  endfunction

  autocmd MyAutoCmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    if 's:prev_buffer_config'->exists()
      " Restore sources
      call ddc#custom#set_buffer(s:prev_buffer_config)
    endif
  endfunction

  autocmd MyAutoCmd User skkeleton-mode-changed call s:skkeleton_changed()
  function! s:skkeleton_changed() abort
    " Change the cursor color
    const mode = g:skkeleton#mode
    if mode ==# 'hira'
      highlight Cursor       gui=NONE guibg=#80403f guifg=fg
    elseif mode ==# 'kata'
      highlight Cursor       gui=NONE guibg=#f04060 guifg=fg
    elseif mode ==# 'hankata'
      highlight Cursor       gui=NONE guibg=#60a060 guifg=fg
    elseif mode ==# 'zenkaku'
      highlight Cursor       gui=NONE guibg=#60c060 guifg=fg
    elseif mode ==# 'abbrev'
      highlight Cursor       gui=NONE guibg=#60f060 guifg=fg
    else
      highlight Cursor       gui=NONE guibg=#606060 guifg=fg
    endif
  endfunction

  autocmd MyAutoCmd User skkeleton-handled call s:skkeleton_handled()
  function! s:skkeleton_handled() abort
    if g:skkeleton#mode ==# ''
      return
    endif

    " Change the cursor color
    const state = g:skkeleton#state

    if state.phase ==# 'henkan' ||
        \ state.phase ==# 'input:okurinasi' ||
        \ state.phase ==# 'input:okuriari'
      highlight Cursor       gui=NONE guibg=#a0f0a0 guifg=fg
    else
      call s:skkeleton_changed()
    endif
  endfunction

  call skkeleton#initialize()
'''

[[plugins]]
repo = 'kuuote/lspoints'
on_event = 'BufRead'
depends = 'denops.vim'
hook_source = '''
call lspoints#load_extensions([
        \   'nvim_diagnostics',
        \ ])

function s:attach_ls() abort
  if &l:filetype ==# 'typescript' || &l:filetype ==# 'typescriptreact'
    " Deno lsp

    " Check "package.json" exists
    if findfile('package.json', '.;') !=# ''
      return
    endif

    call lspoints#attach('denols', #{
            \   cmd: ['deno', 'lsp'],
            \   initializationOptions: #{
            \     enable: v:true,
            \     lint: v:true,
            \     documentPreloadLimit: 10,
            \     unstable: v:true,
            \     suggest: #{
            \       autoImports: v:false,
            \     },
            \   },
            \ })

    " Use lspoints for nvim-lsp source
    call ddc#custom#patch_buffer('sourceParams', #{
        \   lsp: #{
        \     lspEngine: 'lspoints',
        \   }
        \ })
  endif
endfunction

call s:attach_ls()
autocmd MyAutoCmd FileType * call s:attach_ls()
'''
