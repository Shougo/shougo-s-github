[[plugins]]
repo = 'vim-denops/denops.vim'
hook_source = '''
  let g:denops#debug = v:false

  let g:denops#server#deno_args = [
      \   '-q',
      \   '-A',
      \ ]

  " NOTE: for Deno KV storage
  let g:denops#server#deno_args += ['--unstable-kv']

  " NOTE: for profile
  "let g:denops#server#deno_args += ['--inspect']

  " NOTE: for denops-silicon
  "let g:denops#server#deno_args += ['--unstable-ffi']

  "let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'vim-denops/denops-startup-recorder.vim'
on_source = 'denops.vim'

[[plugins]]
repo = 'uga-rosa/scorpeon.vim'
on_cmd = 'VsctmHighlightEnable'
depends = 'denops.vim'
hook_source = '''
  let g:scorpeon_extensions_path = '~/.cache/scorpeon/extensions'->expand()
'''

[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = 'denops.vim'
denops_wait = false

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ict = '<Plug>(skkeleton-' }
#on_event = 'InsertEnter'
denops_wait = false
hook_add = '''
  inoremap <C-j> <Plug>(skkeleton-toggle)
  cnoremap <C-j> <Plug>(skkeleton-toggle)
  tnoremap <C-j> <Plug>(skkeleton-toggle)
  nnoremap <C-j> i<Plug>(skkeleton-enable)

  " Lazy load by background
  call timer_start(10, { _ -> dpp#source('skkeleton') })
'''
hook_source = '''
  "let g:skkeleton#debug = v:true

  call skkeleton#config(#{
        \   databasePath: '~/.cache/skkeleton.db'->expand(),
        \   eggLikeNewline: v:true,
        \   globalDictionaries: has('win32') ?
        \     ['~/.config/SKK-JISYO.L'->expand()] :
        \     ['/usr/share/skk/SKK-JISYO.L'],
        \   markerHenkan: '',
        \   markerHenkanSelect: '',
        \   registerConvertResult: v:true,
        \   sources: ["deno_kv", "google_japanese_input"],
        \ })

  " For SKK server test.
  "call skkeleton#config(#{
  "      \   sources: ["deno_kv", "skk_server"],
  "      \ })

  call skkeleton#register_kanatable('rom', {
        \   'jj': 'escape',
        \   '~': ['ã€œ', ''],
        \ })

  autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    if (!has('nvim') || $DISPLAY !=# '') && has('clipboard')
      " Copy to clipboard to use Vim as IME
      autocmd InsertLeave * ++once
        \ let @* = '.'->getline() | let @+ = @*
    endif

    let s:hl_cursor = has('nvim') ?
          \ nvim_get_hl(0, #{ name: 'Cursor'}) : 'Cursor'->hlget()
  endfunction

  autocmd MyAutoCmd User skkeleton-mode-changed call s:skkeleton_changed()
  function! s:skkeleton_changed() abort
    " Change the cursor color
    if g:skkeleton#mode ==# 'hira'
      highlight Cursor       gui=NONE guibg=#80403f guifg=fg
    elseif g:skkeleton#mode ==# 'kata'
      highlight Cursor       gui=NONE guibg=#f04060 guifg=fg
    elseif g:skkeleton#mode ==# 'hankata'
      highlight Cursor       gui=NONE guibg=#60a060 guifg=fg
    elseif g:skkeleton#mode ==# 'zenkaku'
      highlight Cursor       gui=NONE guibg=#60c060 guifg=fg
    elseif g:skkeleton#mode ==# 'abbrev'
      highlight Cursor       gui=NONE guibg=#60f060 guifg=fg
    else
      if has('nvim')
        call nvim_set_hl(0, 'Cursor', s:hl_cursor)
      else
        call hlset(s:hl_cursor)
      endif
    endif
  endfunction

  autocmd MyAutoCmd User skkeleton-handled call s:skkeleton_handled()
  function! s:skkeleton_handled() abort
    if g:skkeleton#mode ==# ''
      return
    endif

    " Change the cursor color
    if g:skkeleton#state.phase ==# 'henkan' ||
        \ g:skkeleton#state.phase ==# 'input:okurinasi' ||
        \ g:skkeleton#state.phase ==# 'input:okuriari'
      highlight Cursor       gui=NONE guibg=#a0f0a0 guifg=fg
    else
      call s:skkeleton_changed()
    endif
  endfunction

  call skkeleton#initialize()
'''

[[plugins]]
repo = 'kuuote/lspoints'
on_event = 'BufRead'
depends = 'denops.vim'
hook_source = '''
call lspoints#load_extensions([
        \   'nvim_diagnostics',
        \ ])

function s:attach_ls() abort
  const ft = &l:filetype
  if ft =~# '^typescript' && 'deno'->executable()
    " Deno lsp

    " Check "package.json" exists
    if findfile('package.json', '.;') !=# ''
      return
    endif

    call lspoints#attach('denols', #{
            \   cmd: ['deno', 'lsp'],
            \   initializationOptions: #{
            \     enable: v:true,
            \     lint: v:true,
            \     documentPreloadLimit: 10,
            \     unstable: v:true,
            \     suggest: #{
            \       autoImports: v:false,
            \     },
            \   },
            \ })

    " Use lspoints for nvim-lsp source
    call ddc#custom#patch_buffer('sourceParams', #{
        \   lsp: #{
        \     lspEngine: 'lspoints',
        \   }
        \ })
  elseif ft ==# 'css' && 'tailwindcss-language-server'->executable()
    " Tailwind CSS

    " Check tailwindcss file exists
    if findfile('tailwind.config.js', '.;') !=# ''
      return
    endif

    call lspoints#attach('tailwindcss-language-server', #{
            \   cmd: ['tailwindcss-language-server', '--stdio'],
            \   initializationOptions: #{
            \ })
  endif
endfunction

call s:attach_ls()
autocmd MyAutoCmd FileType * call s:attach_ls()
'''
