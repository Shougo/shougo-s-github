[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
on_source = 'denops.vim'
hook_add = '''
  nnoremap s<Space> <Cmd>Ddu
  \ -name=files file
  \ -source-option-path='`fnamemodify(dein#util#_get_myvimrc(), ':p:h').'/rc'`'
  \ <CR>
  nnoremap ss
  \ <Cmd>Ddu -name=files file_point file_old
  \ `finddir('.git', ';') != '' ? 'file_external' : 'file'`
  \ file -source-param-new
  \ -volatile -sync
  \ -ui-param-displaySourceName=short
  \ <CR>
  nnoremap / <Cmd>Ddu
  \ -name=search line -resume=v:false
  \ -ui-param-startFilter
  \ <CR>
  nnoremap * <Cmd>Ddu
  \ -name=search line -resume=v:false
  \ -input=`expand('<cword>')`
  \ -ui-param-startFilter=v:false
  \ <CR>
  nnoremap ;g <Cmd>Ddu
  \ -name=search rg -resume=v:false
  \ -ui-param-ignoreEmpty
  \ -source-param-input=`input('Pattern: ', expand('<cword>'))`
  \ <CR>
  nnoremap ;f <Cmd>Ddu
  \ -name=search rg -resume=v:false
  \ -ui-param-ignoreEmpty
  \ -source-param-input=`input('Pattern: ', expand('<cword>'))`
  \ -source-param-path=`input('Directory: ', '', 'dir')`
  \ <CR>
  nnoremap n <Cmd>Ddu
  \ -name=search -resume
  \ -ui-param-startFilter=v:false
  \ <CR>
  nnoremap ;r <Cmd>Ddu
  \ -name=register register
  \ -source-option-defaultAction=`col('.') == 1 ? 'insert' : 'append'`
  \ -ui-param-autoResize
  \ <CR>
  nnoremap ;d <Cmd>Ddu
  \ -name=outline markdown
  \ -ui-param-ignoreEmpty -ui-param-displayTree
  \ <CR>
  xnoremap <expr> ;r (mode() ==# 'V' ? '"_R<Esc>' : '"_d') .
  \ '<Cmd>Ddu -name=register register
  \ -source-option-defaultAction=insert
  \ -ui-param-autoResize<CR>'
  nnoremap sg <Cmd>Ddu
  \ dein<CR>
  nnoremap [Space]<Space> <Cmd>Ddu
  \ -name=search line -resume=v:false
  \ -source-param-range=window
  \ -ui-param-startFilter
  \ <CR>

  "inoremap <C-q> <Cmd>Ddu
  "\ -name=register register
  "\ -source-option-defaultAction=append
  "\ -source-param-range=window
  "\ -ui-param-startFilter=v:false
  "\ <CR>
  inoremap <C-q> <Cmd>call ddu#start(#{
  \   name: 'file',
  \   ui: 'ff',
  \   input: matchstr(getline('.')[: col('.') - 1], '\f*$'),
  \   sources: [
  \     #{ name: 'file', options: #{ defaultAction: 'feedkeys' } },
  \   ],
  \   uiParams: #{
  \     ff: #{
  \       startFilter: v:true,
  \       replaceCol: match(getline('.')[: col('.') - 1], '\f*$') + 1,
  \     },
  \   },
  \ })<CR>
  "cnoremap <C-q> <Cmd>Ddu
  "\ -name=register register
  "\ -source-option-defaultAction=feedkeys
  "\ -source-param-range=window
  "\ -ui-param-startFilter=v:false
  "\ <CR><Cmd>call setcmdline('')<CR><CR>
  cnoremap <C-q> <Cmd>call ddu#start(#{
  \   name: 'file',
  \   ui: 'ff',
  \   input: matchstr(getcmdline()[: getcmdpos() - 2], '\f*$'),
  \   sources: [
  \     #{ name: 'file', options: #{ defaultAction: 'feedkeys' } },
  \   ],
  \   uiParams: #{
  \     ff: #{
  \       startFilter: v:true,
  \       replaceCol: match(getcmdline()[: getcmdpos() - 2], '\f*$') + 1,
  \     },
  \   },
  \ })<CR><Cmd>call setcmdline('')<CR><CR>
'''
hook_source = '''
  call ddu#custom#alias('source', 'file_rg', 'file_external')

  call ddu#custom#patch_global(#{
      \   ui: 'ff',
      \   sourceOptions: #{
      \     _: #{
      \       ignoreCase: v:true,
      \       matchers: ['matcher_substring'],
      \     },
      \     file_old: #{
      \       matchers: [
      \         'matcher_substring', 'matcher_relative',
      \       ],
      \     },
      \     file_external: #{
      \       matchers: [
      \         'matcher_substring',
      \       ],
      \     },
      \     file_rec: #{
      \       matchers: [
      \         'matcher_substring', 'matcher_hidden',
      \       ],
      \     },
      \     file: #{
      \       matchers: [
      \         'matcher_substring', 'matcher_hidden',
      \       ],
      \       sorters: ['sorter_alpha'],
      \     },
      \     dein: #{
      \       defaultAction: 'cd',
      \     },
      \     markdown: #{
      \       sorters: [],
      \     },
      \     line: #{
      \       matchers: [
      \         'matcher_kensaku',
      \       ],
      \     },
      \   },
      \   sourceParams: #{
      \     file_external: #{
      \       cmd: ['git', 'ls-files', '-co', '--exclude-standard'],
      \     },
      \   },
      \   uiOptions: #{
      \     filer: #{
      \       toggle: v:true,
      \     },
      \   },
      \   uiParams: #{
      \     ff: #{
      \       filterSplitDirection: 'floating',
      \       previewFloating: v:true,
      \       highlights: #{
      \         floating: 'Normal',
      \       },
      \     },
      \     filer: #{
      \       split: 'no',
      \       sort: 'filename',
      \       sortTreesFirst: v:true,
      \       toggle: v:true,
      \     },
      \   },
      \   kindOptions: #{
      \     file: #{
      \       defaultAction: 'open',
      \     },
      \     word: #{
      \       defaultAction: 'append',
      \     },
      \     deol: #{
      \       defaultAction: 'switch',
      \     },
      \     action: #{
      \       defaultAction: 'do',
      \     },
      \     readme_viewer: #{
      \       defaultAction: 'open',
      \     },
      \   },
      \   kindParams: #{
      \     action: #{
      \       quit: v:true,
      \     },
      \   },
      \   actionOptions: #{
      \     narrow: #{
      \       quit: v:false,
      \     },
      \   },
      \ })
  call ddu#custom#patch_local('files', #{
      \   uiParams: #{
      \     ff: #{
      \       split: has('nvim') ? 'floating' : 'horizontal',
      \     }
      \   },
      \ })

  call ddu#custom#patch_global(#{
      \   sourceParams: #{
      \     file_rg: #{
      \       cmd: ['rg', '--files', '--glob', '!.git',
      \               '--color', 'never', '--no-messages'],
      \       updateItems: 50000,
      \     },
      \     rg: #{
      \       args: [
      \         '--ignore-case', '--column', '--no-heading', '--color', 'never',
      \       ],
      \     },
      \   }
      \ })
  call ddu#custom#patch_global(#{
      \   filterParams: #{
      \     matcher_substring: #{
      \       highlightMatched: 'Search',
      \     },
      \   }
      \ })

  call ddu#custom#action('kind', 'file', 'grep',
      \ { args -> GrepAction(args) })
  function! GrepAction(args)
    " NOTE: param "path" must be one directory
    let path = a:args.items[0].action.path
    let directory = isdirectory(path) ? path : fnamemodify(path, ':h')

    call ddu#start(#{
        \   name: a:args.options.name,
        \   push: v:true,
        \   sources: [
        \     {
        \       name: 'rg',
        \       params: {
        \         path: path,
        \         input: input('Pattern: '),
        \       },
        \     },
        \   ],
        \ })
  endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
depends = 'ddu.vim'
on_cmd = 'Ddu'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer> <Space>
  \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> *
  \ <Cmd>call ddu#ui#ff#do_action('toggleAllItems')<CR>
  nnoremap <buffer> i
  \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer> <C-l>
  \ <Cmd>call ddu#ui#ff#do_action('refreshItems')<CR>
  nnoremap <buffer> p
  \ <Cmd>call ddu#ui#ff#do_action('previewPath')<CR>
  nnoremap <buffer> P
  \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <buffer> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer> <C-h>
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer> a
  \ <Cmd>call ddu#ui#ff#do_action('chooseAction')<CR>
  nnoremap <buffer> o
  \ <Cmd>call ddu#ui#ff#do_action('expandItem',
  \ #{ mode: 'toggle' })<CR>
  nnoremap <buffer> c
  \ <Cmd>call ddu#ui#ff#multi_actions('itemAction',
  \ #{ name: 'cd' })<CR>
  nnoremap <buffer> d
  \ <Cmd>call ddu#ui#ff#do_action('itemAction',
  \ b:ddu_ui_name ==# 'filer' ? #{ name: 'trash' } : #{ name: 'delete' })<CR>
  nnoremap <buffer> e
  \ <Cmd>call ddu#ui#ff#do_action('itemAction',
  \ #{ name: 'edit' })<CR>
  nnoremap <buffer> E
  \ <Cmd>call ddu#ui#ff#do_action('itemAction',
  \ #{ params: eval(input('params: ')) })<CR>
  nnoremap <buffer> v
  \ <Cmd>call ddu#ui#ff#do_action('itemAction',
  \ #{ name: 'open', params: #{ command: 'vsplit' } })<CR>
  nnoremap <buffer> N
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'new' })<CR>
  nnoremap <buffer> r
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'quickfix' })<CR>
  nnoremap <buffer> yy
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'yank' })<CR>
  nnoremap <buffer> gr
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'grep' })<CR>
  nnoremap <buffer> n
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'narrow' })<CR>

  xnoremap <silent><buffer> <Space>
  \ :call ddu#ui#ff#do_action('toggleSelectItem')<CR>

  " Switch options
  nnoremap <buffer> u
  \ <Cmd>call ddu#ui#ff#do_action('updateOptions', #{
  \   sourceOptions: #{
  \     _: #{
  \       matchers: [],
  \     },
  \   },
  \ })<CR>

  " Switch sources
  nnoremap <buffer> ff
  \ <Cmd>call ddu#ui#ff#do_action('updateOptions', #{
  \   sources: [
  \     #{ name: 'file' },
  \   ],
  \ })<CR>
'''
ddu-ff-filter = '''
  inoremap <buffer> <CR>
  \ <Esc><Cmd>call ddu#ui#ff#close()<CR>
  nnoremap <buffer> <CR>
  \ <Esc><Cmd>call ddu#ui#ff#close()<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_add = '''
  nnoremap [Space]f <Cmd>Ddu
  \ -name=filer-`win_getid()` -ui=filer -resume -sync file
  \ -source-option-path=`getcwd()`
  \ -source-option-columns=filename<CR>
'''
hook_source = '''
  autocmd MyAutoCmd TabEnter,WinEnter,CursorHold,FocusGained *
  \ call ddu#ui#filer#do_action('checkItems')
'''
[plugins.ftplugin]
ddu-filer = '''
  nnoremap <buffer> <Space>
  \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> *
  \ <Cmd>call ddu#ui#filer#do_action('toggleAllItems')<CR>
  nnoremap <buffer> a
  \ <Cmd>call ddu#ui#filer#do_action('chooseAction')<CR>
  nnoremap <buffer> q
  \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  nnoremap <buffer> o
  \ <Cmd>call ddu#ui#filer#do_action('expandItem',
  \ {'mode': 'toggle'})<CR>
  nnoremap <buffer> O
  \ <Cmd>call ddu#ui#filer#do_action('expandItem',
  \ {'maxLevel': -1})<CR>
  "nnoremap <buffer> O
  "\ <Cmd>call ddu#ui#filer#do_action('collapseItem')<CR>
  nnoremap <buffer> c
  \ <Cmd>call ddu#ui#filer#multi_actions([
  \   ['itemAction', {'name': 'copy'}],
  \   ['clearSelectAllItems'],
  \ ])<CR>
  nnoremap <buffer> d
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'delete' })<CR>
  nnoremap <buffer> D
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'trash' })<CR>
  nnoremap <buffer> m
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'move' })<CR>
  nnoremap <buffer> r
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'rename' })<CR>
  nnoremap <buffer> x
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'executeSystem' })<CR>
  nnoremap <buffer> p
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'paste' })<CR>
  nnoremap <buffer> K
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'newDirectory' })<CR>
  nnoremap <buffer> N
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'newFile' })<CR>
  nnoremap <buffer> ~
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'narrow', params: #{ path: expand('~') } })<CR>
  nnoremap <buffer> h
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{ name: 'narrow', params: #{ path: '..' } })<CR>
  nnoremap <buffer> I
  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
  \ #{
  \   name: 'narrow',
  \   params: #{
  \     path: fnamemodify(input('cwd: ', b:ddu_ui_filer_path, 'dir'), ':p')
  \   }
  \ })<CR>
  nnoremap <buffer> >
  \ <Cmd>call ddu#ui#filer#do_action('updateOptions', #{
  \   sourceOptions: #{
  \     file: #{
  \       matchers: ToggleHidden('file'),
  \     },
  \   },
  \ })<CR>
  nnoremap <buffer> <C-l>
  \ <Cmd>call ddu#ui#filer#do_action('checkItems')<CR>
  nnoremap <buffer><expr> <CR>
  \ ddu#ui#filer#is_tree() ?
  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', #{ name: 'narrow' })<CR>" :
  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', #{ name: 'open' })<CR>"
  nnoremap <buffer><expr> l
  \ ddu#ui#filer#is_tree() ?
  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', #{ name: 'narrow' })<CR>" :
  \ "<Cmd>call ddu#ui#filer#do_action('itemAction', #{ name: 'open' })<CR>"
  nnoremap <buffer> gr
  \ <Cmd>call ddu#ui#filer#do_action('itemAction', #{ name: 'grep' })<CR>

  function! ToggleHidden(name)
    let current = ddu#custom#get_current(b:ddu_ui_name)
    let source_options = get(current, 'sourceOptions', {})
    let source_options_name = get(source_options, a:name, {})
    let matchers = get(source_options_name, 'matchers', [])
    return empty(matchers) ? ['matcher_hidden'] : []
  endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_point'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'mikanIchinose/ddu-source-markdown'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_relative'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-converter_display_word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
depends = 'kensaku.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'
